import * as isoly from "isoly"
import * as authly from "authly"
import * as model from "../../index"

const now = new Date(Math.floor(new Date().getTime() / 1000) * 1000)
authly.Issuer.defaultIssuedAt = now.getTime() / 1000

describe("User.Tag", () => {
	const privateKey =
		"MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC7VJTUt9Us8cKj" +
		"MzEfYyjiWA4R4/M2bS1GB4t7NXp98C3SC6dVMvDuictGeurT8jNbvJZHtCSuYEvu" +
		"NMoSfm76oqFvAp8Gy0iz5sxjZmSnXyCdPEovGhLa0VzMaQ8s+CLOyS56YyCFGeJZ" +
		"qgtzJ6GR3eqoYSW9b9UMvkBpZODSctWSNGj3P7jRFDO5VoTwCQAWbFnOjDfH5Ulg" +
		"p2PKSQnSJP3AJLQNFNe7br1XbrhV//eO+t51mIpGSDCUv3E0DDFcWDTH9cXDTTlR" +
		"ZVEiR2BwpZOOkE/Z0/BVnhZYL71oZV34bKfWjQIt6V/isSMahdsAASACp4ZTGtwi" +
		"VuNd9tybAgMBAAECggEBAKTmjaS6tkK8BlPXClTQ2vpz/N6uxDeS35mXpqasqskV" +
		"laAidgg/sWqpjXDbXr93otIMLlWsM+X0CqMDgSXKejLS2jx4GDjI1ZTXg++0AMJ8" +
		"sJ74pWzVDOfmCEQ/7wXs3+cbnXhKriO8Z036q92Qc1+N87SI38nkGa0ABH9CN83H" +
		"mQqt4fB7UdHzuIRe/me2PGhIq5ZBzj6h3BpoPGzEP+x3l9YmK8t/1cN0pqI+dQwY" +
		"dgfGjackLu/2qH80MCF7IyQaseZUOJyKrCLtSD/Iixv/hzDEUPfOCjFDgTpzf3cw" +
		"ta8+oE4wHCo1iI1/4TlPkwmXx4qSXtmw4aQPz7IDQvECgYEA8KNThCO2gsC2I9PQ" +
		"DM/8Cw0O983WCDY+oi+7JPiNAJwv5DYBqEZB1QYdj06YD16XlC/HAZMsMku1na2T" +
		"N0driwenQQWzoev3g2S7gRDoS/FCJSI3jJ+kjgtaA7Qmzlgk1TxODN+G1H91HW7t" +
		"0l7VnL27IWyYo2qRRK3jzxqUiPUCgYEAx0oQs2reBQGMVZnApD1jeq7n4MvNLcPv" +
		"t8b/eU9iUv6Y4Mj0Suo/AU8lYZXm8ubbqAlwz2VSVunD2tOplHyMUrtCtObAfVDU" +
		"AhCndKaA9gApgfb3xw1IKbuQ1u4IF1FJl3VtumfQn//LiH1B3rXhcdyo3/vIttEk" +
		"48RakUKClU8CgYEAzV7W3COOlDDcQd935DdtKBFRAPRPAlspQUnzMi5eSHMD/ISL" +
		"DY5IiQHbIH83D4bvXq0X7qQoSBSNP7Dvv3HYuqMhf0DaegrlBuJllFVVq9qPVRnK" +
		"xt1Il2HgxOBvbhOT+9in1BzA+YJ99UzC85O0Qz06A+CmtHEy4aZ2kj5hHjECgYEA" +
		"mNS4+A8Fkss8Js1RieK2LniBxMgmYml3pfVLKGnzmng7H2+cwPLhPIzIuwytXywh" +
		"2bzbsYEfYx3EoEVgMEpPhoarQnYPukrJO4gwE2o5Te6T5mJSZGlQJQj9q4ZB2Dfz" +
		"et6INsK0oG8XVGXSpQvQh3RUYekCZQkBBFcpqWpbIEsCgYAnM3DQf3FJoSnXaMhr" +
		"VBIovic5l0xFkEHskAjFTevO86Fsz1C2aSeRKSqGFoOQ0tmJzBEs1R6KqnHInicD" +
		"TQrKhArgLXX4v3CddjfTRJkFWDbE/CkvKZNOrcf1nhaGCPspRJj2KUkj1Fhl9Cnc" +
		"dn/RsYEONbwQSjIfMPkvxF+8HQ=="
	const publicKey =
		"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1SU1LfVLPHCozMxH2Mo" +
		"4lgOEePzNm0tRgeLezV6ffAt0gunVTLw7onLRnrq0/IzW7yWR7QkrmBL7jTKEn5u" +
		"+qKhbwKfBstIs+bMY2Zkp18gnTxKLxoS2tFczGkPLPgizskuemMghRniWaoLcyeh" +
		"kd3qqGElvW/VDL5AaWTg0nLVkjRo9z+40RQzuVaE8AkAFmxZzow3x+VJYKdjykkJ" +
		"0iT9wCS0DRTXu269V264Vf/3jvredZiKRkgwlL9xNAwxXFg0x/XFw005UWVRIkdg" +
		"cKWTjpBP2dPwVZ4WWC+9aGVd+Gyn1o0CLelf4rEjGoXbAAEgAqeGUxrcIlbjXfbc" +
		"mwIDAQAB"
	const creatable: model.User.Tag.Creatable = {
		email: "jane@example.com",
		active: false,
		permissions: {
			"*": {
				application: {},
				organization: {},
				user: {},
			},
			acme: {
				organization: {},
				user: {},
			},
		},
	}
	it("is", () => {
		const tag: model.User.Tag = {
			email: "jane@example.com",
			active: true,
			permissions: {
				"*": {
					application: {},
					organization: {},
					user: {},
				},
				acme: {
					organization: {},
					user: {},
					custom: {},
				},
			},
			audience: "applicationId",
			issuer: "jest",
			issued: "2022-08-03T10:53:14.130Z",
			expires: "2022-08-03T10:53:14.130Z",
			token: "fakeToken",
		}
		expect(model.User.Tag.is(tag)).toEqual(true)
	})
	it("signing", async () => {
		const issuer = model.User.Tag.Issuer.create(
			"userwidgets",
			"applicationId",
			// Generated by: console.log(await Signer.generate("RSA", "SHA-256", 4096).export("private", "base64")) (Cryptly)
			"MIIJQwIBADANBgkqhkiG9w0BAQEFAASCCS0wggkpAgEAAoICAQD09VqysuFYr5iwuRbJQt8YCMinkMDihHVnqSHiOYSDDqT9dnAEidJK3NNxYyHQ5mlmVnd9TzrwkYxrE46YMtJZLUNnsVXm6u/AFRhMVfgnJinDgXCbhJSfhj6gGBUq3k84frMTSE3ufObY/c8iv9UwTkkZ0cLGlK9aemwyoe0lVg1ni75Qv2Cw4/eDc8X7HQekMtpBR1zB7ZHMCDCLjr8Kietdd+0RrjmKM+8SxieSlQWS93az0Lv9JuOtcg0vICIIMfc3QSC0XXSywGujxIHS+4LZ305Q2/OHboucnriN6E1lRYHEF5Ywy2cK/Zl27aTGtX2dqlJdNeH7kUpjjmDpNpDzkezqIrudafIPOWOAcwtp92DRUVRguYsEr0lQs+CqYac3Vx8FdI3N0d3rwjIgV5m+YpTpZLhoRIpvkt15pAoLYSE2cITXEu7fmmvS4++YrNyNHonL0PU3GjSpT1z8cwi/bTIAZS5J0kDYW6eiy75BWD5iF7r8tRTDCm678FOhlVcV6byXOuHBg0sQggt9cz7kcjjVET7zFV9Oh5yJv8HnRMKgh5kc3CjvCsMSy4WjP8WeSRkZDWAzXj3l6qio0AgoWs4gfE8X5MZwD2OHrnP5JgjASLJrOBRSa149NlJBoS6e3/k3ZnO3837OGr+pBkukzCc/DKSLuuAZqKL3ZwIDAQABAoICAB90aBadSLmKJtm+krH6X8pmyllWCaasqqTKf5rclur7VO1lKYIzrmjFjXM4bw2zoKIvBT32kBN3JShUxRE/KWqhGNA2Ydj6nxmzu8CFo41nZaKAuxSFRE5tvxnwrbso+9Q91MHrnXI74KrJgLEuH/KJgvKJUHEOg6vjH4Sq7VhHggYjWCdnQ8PDKjPbiHcz5ZjMnOEYCE2ws3GXNaCeDmMMjcgdT7he/m2EOLVY85jrgOE73Ka/bXxW45KQnCfKgQQ7YkralpgCjisr8UaAw8jzWfyfI5/XdqCT7eKJMRqr01BnSgADpVoTrGIpaWzvnCKWCJDX36avdhrHL92z2Tao5lSC3MeTOXXadx9RwszM8U7Z+iqeA/t34hVwDci70x+Vg+n9FkSnneNSl3EIwmnSgAn2x2ci6SjPka7NaVaXAPMuVxSB0HVYikpHmhkyUkdMCJipMbtIL3vQkU9Tey/qPm09DXbctByBnhBR/XS7vE3iX4/zfsi6XQG0gh8JnAJcLozFRrif/gHdfDzto1eJLh2glzsBB75crxQtPyjYytVKFiy0eXiohvHXEDuTXGvqKnR3XwCmBYhSJ2adZhVjDND7wuQwP1s0YRKZ/rkRfaJxFTkpXnaFg79a8v0UiTgsB+NRl5Cr0KGBjmbSsoV+xu55er1eeCQ31LOdFqDBAoIBAQD7xXqXMjqrMYC990QT6Fi4diMMz8OQwcNKrsFvQWZ/jNKUwpUne0PddMNGaqMGr+h8Ws5WA5gW+n8V3Tcsg3oTk3fzF9i06jT+6a5/jKjzs39LQg6SJjKWYNj96bjw5OrsTahT5zR3gAvdaAJMcx3v1/yTzpkAOC/otE1da2pS/nNJfUGaBMRalQcfWCipzIsZ29zjP7pQvGwvFGbA6SFcui8lXUgtKGL8WXXbp1fJgMfZEoigpOmXTVkYL2PU/Rzi/ct6eYZ8VCAKkOj4FgwG6gkRBJe4wa1Nn340cvRSOfs8ToEeL+Om0s35LrmrSuWKKKy3iB7wrJcCTYOKyd0nAoIBAQD5EpUJOxM+n1uopj9eqsqHlKEWfh1GsRTGaGIH8d3lbBctJGi4+nn4PjN9oa+jLJk0B/B3HjIJm2xJLDZ3G9W58JHmZpu3h19SSTdvhO3JAkRa9b+jc2Mk/QsEPewhvCbWb6oLJAN8Tk5UpyG2YqjPRiYk5nmGw+B9qGLE8ZE7KnEMG8BFFiTlucXre3bDDNMH8p45Bog17Hu48CbAQbmj6SEesoMO+l9vezLaQ7qIlQorWp56PymikptAufZuqG9fZgR1QXQjT9dyppmCIMdg8WIeypDayQBam2AIyrQ2U4rJMvB+FxKjWAxU4EovQmHT0xvXj9/XLF0vLs9vMvvBAoIBAGdkDFjEvsUImibowOMv+iceFHyxYU0z1N/5beQjRlVA3kVKtve0rgTmaz6ikfowCNfwbmVyKmXdTo0LABpej6Y0XADPHSYGO+cmzYsBl2wknTSpltQ7rXCFqvZyoYkDaNnLdkGmY6xjP/wXN0Jvz65r0wRbxgcKC9qTGGYxs0MLzQozztnR9VSBeKBNkr1QCxt+Z3JG/FslVYPr69pyokmzB6NfcEFjIWshzb17NhjAstEYxFS8BFUm5VyCMYwIuXEZ6hKMj0bFQTc1lQYz/5JjT3/Wk/vCRUnoImqlfmG5/8sfLfTYk7MxRHZ80rBeHG8lDvB7jMEnDwhaDpfTF+cCggEBAOZMVTuMwPWVOZYN6egpeUy1k+ENSRqVH8V4vLPl4quAL0nRMXdgOijbspaGSrVQxnOCp8gsRk31xME/vTiSpyLfGrhzxaWD6RJXmodl3MuQag3EzqZeSZzo0Cfi7ZQfubVq2EqmyQZGDU1en+BZBwdoMFrMNC/0q3zkljbNueCAFLkCa9w1ZnZ3OFbM+PnOwM3Hep71uDpL5/YPL3VzEChLphERM/dEb7vPqSyBlVc2n4mIp6IXBvNIJX9Ks16MJTaLSLH2jGEeMPLUsnnMvy2W44fe+uMhGU+t/LUEYG8e/eOdUxrzUItyHSzZmh5qfbPzrfm6EVmOrrayzKBf/sECggEBAKKAtg/3jUa3iFhW0OLt5ODBJjRki9fv4M8MEtQoDfUkfVnjTEsqWKLLP+Sp9iQQTmm+P7NrdhmcXIk+pYLavxzkFF41z49WYiYwVqwSWqzy9OdXjYf37mEv7CePw08AQOE891M5QPbsGAHulI/RmcW6Sp1rdTsycNESFJiID5zaATtLhotMx91349cGTCd9aGhfcHLPjRqlt1f0QSY4NkyPKQRtzDOYroOGM83gbLlftyR5DmMX12uaWl6NjWnTMZFRWHKm3OrFv8ey8tlnDyCQrifGl3bm141n7YAp+xdbFU+Vf11085d6XejQBX39wBdTIS3v+136s+lDBcuPuQI="
		)
		const token = await issuer.sign(creatable, now.getTime() / 1000)
		expect(token).toMatch(/^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$/)
	})
	it("signing and verifying (authly)", async () => {
		const issuer = authly.Issuer.create<model.User.Tag.Creatable>(
			"userwidgets",
			authly.Algorithm.RS256(publicKey, privateKey)
		)
		const verifier = authly.Verifier.create(authly.Algorithm.RS256(publicKey))
		const unsignedVerifier = authly.Verifier.create(authly.Algorithm.none())
		if (!issuer || !verifier || !unsignedVerifier) {
			expect(issuer).not.toEqual(undefined)
			expect(verifier).not.toEqual(undefined)
			expect(unsignedVerifier).not.toEqual(undefined)
			return
		}
		const token = await issuer.sign(creatable, Math.floor(now.getTime() / 1000))
		const result = await verifier.verify(token)
		expect(result).toEqual({ ...creatable, iss: "userwidgets", iat: Math.floor(now.getTime() / 1000), token: token })
	})
	it("signing and verifying", async () => {
		const issuer = model.User.Tag.Issuer.create("userwidgets", "applicationId", privateKey)
		const verifier = model.User.Tag.Verifier.create("userwidgets")
		const token = await issuer.sign(creatable, Math.floor(now.getTime() / 1000))
		const result = await verifier.verify(token)
		expect(result).toEqual({
			...creatable,
			issuer: "userwidgets",
			issued: isoly.DateTime.create(now.getTime() / 1000),
			expires: isoly.DateTime.create(now.getTime() / 1000 + 60 * 60 * 12),
			audience: "applicationId",
			token: token,
		})
	})
	it("unpack", async () => {
		const signedIssuer = model.User.Tag.Issuer.create("userwidgets", "applicationId", privateKey)
		const unsignedIssuer = model.User.Tag.Issuer.create("local", "applicationId")
		const signedToken = await signedIssuer.sign(creatable)
		const unsignedToken = await unsignedIssuer.sign(creatable)
		if (!signedToken || !unsignedToken) {
			expect(signedToken).toBeTruthy()
			expect(unsignedToken).toBeTruthy()
			return
		}
		expect(model.User.Tag.is(await model.User.Tag.unpack(signedToken))).toBeTruthy()
		expect(model.User.Tag.is(await model.User.Tag.unpack(unsignedToken))).toBeTruthy()
	})
})
